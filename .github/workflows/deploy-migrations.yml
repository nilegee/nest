name: Deploy Supabase Schema (IPv4, robust)
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "supabase/**.sql"
      - ".github/workflows/deploy-migrations.yml"
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      RAW_DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install psql + DNS tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client dnsutils net-tools

      - name: Sanitize DATABASE_URL
        id: sanitize
        shell: bash
        run: |
          set -euo pipefail
          URL="$RAW_DATABASE_URL"
          URL="${URL%\"}"; URL="${URL#\"}"; URL="${URL%\'}"; URL="${URL#\'}"
          URL="${URL//sslmode=\"require\"/sslmode=require}"
          URL="${URL//sslmode=%22require%22/sslmode=require}"
          if [[ "$URL" != *"sslmode="* ]]; then
            if [[ "$URL" == *"?"* ]]; then URL="${URL}&sslmode=require"; else URL="${URL}?sslmode=require"; fi
          fi
          echo "SANITIZED_URL=$URL" >> $GITHUB_ENV
          HOST="$(python3 - <<'PY'
          import sys, urllib.parse as u
          url = u.urlsplit(sys.argv[1]); print(url.hostname or "")
          PY
          "$URL")"
          echo "DB_HOST=$HOST" >> $GITHUB_ENV
          SAFE="${URL//postgresql:\/\/postgres:*@/postgresql:\/\/postgres:***@}"
          echo "Using URL (redacted): $SAFE"

      - name: Resolve IPv4 (multiple fallbacks) and export PGHOSTADDR
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${DB_HOST:-}" ]]; then echo "ERROR: Could not parse DB host"; exit 65; fi
          # Try glibc NSS first
          IPV4="$(getent ahostsv4 "$DB_HOST" | awk 'NR==1{print $1}')"
          # Fallback to system resolver
          if [[ -z "${IPV4}" ]]; then IPV4="$(dig +short A "$DB_HOST" | head -n1)"; fi
          # Fallback to Cloudflare
          if [[ -z "${IPV4}" ]]; then IPV4="$(dig @1.1.1.1 +short A "$DB_HOST" | head -n1)"; fi
          # Fallback to Google
          if [[ -z "${IPV4}" ]]; then IPV4="$(dig @8.8.8.8 +short A "$DB_HOST" | head -n1)"; fi
          if [[ -z "${IPV4}" ]]; then
            echo "ERROR: No IPv4 A record found for $DB_HOST via any resolver"; exit 65
          fi
          echo "Resolved IPv4: $IPV4"
          echo "PGHOSTADDR=$IPV4" >> $GITHUB_ENV

      - name: Connectivity probe (forced IPv4)
        shell: bash
        run: |
          set -euo pipefail
          PGHOSTADDR="$PGHOSTADDR" psql "$SANITIZED_URL" -v ON_ERROR_STOP=1 -Atqc "select 'ok' as probe, current_user, current_database();"

      - name: Preflight – confirm schema file exists
        shell: bash
        run: |
          set -euo pipefail
          test -f supabase/schema_inferred.sql || { echo "ERROR: supabase/schema_inferred.sql not found"; ls -R; exit 66; }
          echo "Found schema file: supabase/schema_inferred.sql (size $(wc -c < supabase/schema_inferred.sql) bytes)"
          echo "DB host: $DB_HOST | IPv4: $PGHOSTADDR"

      - name: Ensure required extensions
        shell: bash
        run: |
          set -euo pipefail
          PGHOSTADDR="$PGHOSTADDR" psql "$SANITIZED_URL" -v ON_ERROR_STOP=1 -c 'create extension if not exists "pgcrypto";'

      - name: Apply schema (verbose, echo errors; IPv4)
        shell: bash
        run: |
          set -euo pipefail
          PGHOSTADDR="$PGHOSTADDR" psql "$SANITIZED_URL" \
            --echo-errors --echo-queries \
            -v ON_ERROR_STOP=1 -v VERBOSITY=verbose \
            -f supabase/schema_inferred.sql

      - name: Success marker
        if: success()
        run: echo "✅ Schema applied successfully over IPv4."